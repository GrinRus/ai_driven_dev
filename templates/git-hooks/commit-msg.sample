#!/usr/bin/env bash
set -euo pipefail

MESSAGE_FILE="$1"
ROOT_DIR="$(git rev-parse --show-toplevel)"
CONFIG_FILE="${ROOT_DIR}/config/conventions.json"

# Установите COMMIT_LINT_BYPASS=1, чтобы пропустить проверку (например, для emergency-коммитов).
if [[ "${COMMIT_LINT_BYPASS:-0}" == "1" ]]; then
  exit 0
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
  printf '[commit-msg] config/conventions.json не найден, проверка пропущена\n' >&2
  exit 0
fi

python3 - "$CONFIG_FILE" "$MESSAGE_FILE" <<'PY'
import json
import re
import sys
from pathlib import Path

config_path = Path(sys.argv[1])
message_file = Path(sys.argv[2])

data = json.loads(config_path.read_text(encoding="utf-8"))
commit_cfg = data.get("commit", {})
mode = commit_cfg.get("activeMode", "ticket-prefix")
modes = commit_cfg.get("modes", {})
mode_cfg = modes.get(mode, {})

first_line = message_file.read_text(encoding="utf-8").splitlines()[0].strip()

if not first_line or first_line.startswith("Merge") or first_line.startswith("#"):
    sys.exit(0)

patterns = {
    "ticket-prefix": r"^[A-Z0-9._-]+: .+",
    "conventional": r"^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?: .+",
    "mixed": r"^[A-Z0-9._-]+ (build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?: .+"
}

pattern = patterns.get(mode)
if pattern is None:
    sys.exit(0)

if re.match(pattern, first_line):
    sys.exit(0)

example = mode_cfg.get("example", "STORE-123: describe change")
print(f"[commit-msg] Сообщение не соответствует режиму '{mode}'. Пример: {example}", file=sys.stderr)
sys.exit(1)
PY
