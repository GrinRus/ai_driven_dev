#!/usr/bin/env bash
set -euo pipefail

MESSAGE_FILE="$1"
ROOT_DIR="$(git rev-parse --show-toplevel)"
CONFIG_FILE="${ROOT_DIR}/config/conventions.json"

# Пропустить автозаполнение, если сообщение уже содержит текст (игнорируя комментарии).
if grep -Eq '^[^#[:space:]]' "$MESSAGE_FILE"; then
  exit 0
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
  exit 0
fi

CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo '')"

python3 - "$CONFIG_FILE" "$MESSAGE_FILE" "$CURRENT_BRANCH" <<'PY'
import json
import re
import sys
from pathlib import Path

config_path = Path(sys.argv[1])
message_file = Path(sys.argv[2])
branch = sys.argv[3]

data = json.loads(config_path.read_text(encoding="utf-8"))
commit_cfg = data.get("commit", {})
mode = commit_cfg.get("mode") or commit_cfg.get("activeMode", "ticket-prefix")
modes = commit_cfg.get("modes", {})
mode_cfg = modes.get(mode, {})
example = mode_cfg.get("example", "STORE-123: describe change")

ticket = ""
if branch:
    match = re.search(r"[A-Z][A-Z0-9]+-[0-9]+", branch)
    if match:
        ticket = match.group(0)

if mode == "ticket-prefix" and ticket:
    suggestion = f"{ticket}: "
elif mode == "mixed" and ticket:
    suggestion = f"{ticket} feat(<scope>): "
elif mode == "conventional":
    suggestion = "feat(<scope>): "
else:
    suggestion = ""

if not suggestion:
    sys.exit(0)

original = message_file.read_text(encoding="utf-8", errors="ignore")
comment_hint = f"# Пример ({mode}): {example}"

message_file.write_text(
    suggestion + "\n\n" + comment_hint + "\n" + original,
    encoding="utf-8"
)
PY
